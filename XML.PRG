// операции записи информации в XML-файл
// (предполагается, что файл уже открыт с Public-дескриптором "fp")
#include "function.ch"

Static otstup := 0, step_otstup := 1

***** первая строка XML-файла
Function xml_1(s)
DEFAULT s TO '<?xml version="1.0" encoding="windows-1251"?>'
add_string(dos2win(s))
return NIL

***** строка для оформления начала информационного блока (на отдельной строке)
Function xml_Begin(s,arr)
// s   - наименование элемента
// arr - двумерный массив (или NIL)
add_string(space(otstup)+"<"+dos2win(s)+xml_Put_Arr(arr)+">")
otstup += step_otstup
return NIL

***** строка для оформления окончания информационного блока (на отдельной строке)
Function xml_End(s)
// s - наименование элемента
otstup -= step_otstup
add_string(space(otstup)+"</"+dos2win(s)+">")
return NIL

***** вывод строки в XML-файл
Function xml_Stroke(s,xvalue,is_need)
// s       - наименование элемента
// xvalue  - значение элемента (или двумерный массив)
// is_need - обязательность вывода данного элемента
Local stroke, fl := .t.
DEFAULT xvalue TO "", is_need TO .t.
if !is_need .and. empty(xvalue)
  fl := .f.
endif
if fl
  stroke := space(otstup)+"<"+dos2win(s)
  if empty(xvalue)
    add_string(stroke+"/>")
  elseif valtype(xvalue) == "A"
    add_string(stroke+xml_Put_Arr(xvalue)+"/>")
  else
    add_string(stroke+">"+dos2win(xml_Convert(xvalue))+"</"+dos2win(s)+">")
  endif
endif
return NIL

***** вывод примечания в XML-файл
Function xml_Prim(s)
add_string(space(otstup)+"<!-- "+dos2win(s)+" -->")
return NIL

***** вывод массива
Static Function xml_Put_Arr(arr)
Local i, s := ''
if valtype(arr) == "A"
  for i := 1 to len(arr)
    s += ' '+dos2win(arr[i,1])+'="'+dos2win(xml_Convert(arr[i,2]))+'"'
  next
endif
return s

***** превращение любой переменной в строку
Static Function xml_Convert(xvalue)
Local i, c, lvalue := ""
if valtype(xvalue) == "D"
  lvalue := full_date(xvalue)
elseif valtype(xvalue) == "N"
  lvalue := lstr(xvalue)
elseif valtype(xvalue) == "C"
  // в строке убрать лишние пробелы
  xvalue := charone(" ",alltrim(xvalue))
  // в строке заменить угловые скобки на кавычки (а кавычки = &quot;)
  for i := 1 to len(xvalue)
    c := substr(xvalue,i,1)
    lvalue += iif(c $ '"<>', '&quot;', c)
  next
endif
return lvalue
