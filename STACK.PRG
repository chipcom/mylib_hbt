/***
*  Stack.prg
*  Функции для реализации стекового механизма
*  Copyright (c) 1990 Nantucket Corp.  Все права сохраняются.
*
*  Компилировать с опциями: /n/w/a/m
*/
/***********
* Русификация произведена СП "Магнит" в апреле - августе 1991 г.
* с ведома и по поручению Nantucket Corp.
* тел.: (095) 289-43-00, (095) 289-44-77, (095) 289-44-83
* факс: (095) 289-34-69
************/


/***
*    Что такое стек?
*
*     Стек - это структура хранения данных по алгоритму Last-In-First-Out
*     (LIFO) - "последний вошел - первый вышел".  В качестве аналогии
*     можно рассмотреть стек книг. Если вы положите книгу A на стол,
*     на нее - книгу B, а сверху книгу C, то, таким образом, вы создадите
*     стек из трех элементов. Книга C будет находиться в вершине
*     стека, а книга A - внизу стека.
*
*     Добавление нового элемента в стек называется "вталкиванием"
*     (pushing) элемента в стек. Таким образом, Вы "втолкнули" три
*     элемента в стек книг. Удаление элемента из вершины стека
*     называется "выталкиванием" (popping) элемента. В отличие от
*     книжного стека, Вы не можете получить данные из середины
*     стековой структуры данных, откуда элементы "выталкиваются" в
*     обратном порядке.  То есть, последний элемент достается первым
*     (LIFO).
*
*     Используя функции этого файла, мы можем моделировать стек книг
*     так, как это показано ниже:
*
*    // Создать пустой стек
*    aStack := StackNew()
*
*    // Добавить каждый элемент в стек
*    StackPush( aStack, "Книга A" )
*    StackPush( aStack, "Книга B" )
*    StackPush( aStack, "Книга C" )
*
*    // Теперь "вытолкнуть"
*    ? StackPop( aStack )      // Выводится "Книга C"
*    ? StackPop( aStack )      // Выводится "Книга B"
*    ? StackPop( aStack )      // Выводится "Книга A" (теперь стек пуст)
*
*
*    Другим примером может быть стек установок цвета:
*
*    aColors := StackNew()
*
*    StackPush( aColors, SETCOLOR() )  // Сохранение текущих установок
*    SETCOLOR( .... )                  // Изменение установки
*    ....                              // Вызов других функций, выполняющих
*                                      // что-либо
*
*    SETCOLOR( StackPop( aColors ) )   // Восстановление в обратном порядке
*
*/


/***
*  Функции:
*
*    StackNew() --> aStack
*    Создать новый стек
*
*    StackPush( <aStack>, <exp> ) --> aStack
*    Добавление элемента в стек
*
*    StackPop( <aStack> ) --> value
*    Изъять элемент из стека и возвратить его или NIL, если стек пуст
*
*    StackIsEmpty( <aStack> ) --> lEmpty
*    Проверка пустоты стека
*
*    StackTop( <aStack> ) --> value
*    Выдать значение элемента из вершины стека без его изъятия
*
*/


/***
*   StackNew() --> aStack
*   Создать новый стек
*/
FUNCTION StackNew()
   RETURN {}


/***
*   StackPush( <aStack>, <exp> ) --> aStack
*   Добавление элемента в стек
*/
FUNCTION StackPush( aStack, exp )
   // Добавление нового элемента в массив и возврат нового массива
   RETURN AADD( aStack, exp )


/***
*   StackPop( <aStack> ) --> value
*   Изъять элемент из стека и возвратить его или NIL, если стек пуст
*
*/
FUNCTION StackPop( aStack )
   LOCAL valueLast, nLen := LEN( aStack )

   // Проверка на пустоту
   IF nLen == 0
      RETURN NIL
   ENDIF

   // получение последнего элемента массива, являющегося элементом вершины стека
   valueLast := aStack[ nLen ]

   // удаление последнего элемента путем укорочения массива
   ASIZE( aStack, nLen - 1 )

   // Возврат выделенного значения
   RETURN valueLast


/***
*  StackIsEmpty( <aStack> ) --> lEmpty
*   Проверка пустоты стека
*
*/
FUNCTION StackIsEmpty( aStack )
   RETURN EMPTY( aStack )


/***
*  StackGetTop( <aStack> ) --> value
*   Выдать значение элемента из вершины стека без его изъятия
*
*/
FUNCTION StackGetTop( aStack )
   //
   // Возврат последнего элемента массива, являющегося элементом вершины стека
   RETURN ATAIL( aStack )


/***
*  StackTop( <aStack> ) --> value
*  Выдать значение элемента из вершины стека без его изъятия
*
*/
FUNCTION StackTop( aStack )
   //
   // Возврат последнего элемента массива, являющегося элементом вершины стека
   RETURN ATAIL( aStack )
